package domain

const serviceGenImpl = `package [[.packageName]]

import (
	"github.com/ringbrew/gsv/service"
	"[[.module]]/export/[[.packageName]]"
	"[[.module]]/internal/domain"
	"google.golang.org/grpc"
)

type [[.serviceName]] struct {
	ctx *domain.UseCaseContext
	[[.packageName]].Unimplemented[[.protoServiceName]]Server

	name   string
	remark string
	desc   service.Description
}

func New[[.serviceName]](ctx *domain.UseCaseContext) service.Service {
	return &[[.serviceName]]{
		ctx: ctx,
		name:   "[[.packageName]].[[.protoServiceName]]",
		remark: "",
		desc: service.Description{
			Valid:           true,
			GrpcServiceDesc: []grpc.ServiceDesc{[[.packageName]].[[.protoServiceName]]_ServiceDesc},
			GrpcGateway:     nil,
		},
	}
}

func (s *[[.serviceName]]) Name() string {
	return s.name
}

func (s *[[.serviceName]]) Remark() string {
	return s.remark
}

func (s *[[.serviceName]]) Description() service.Description {
	return s.desc
}`

const serviceDefineImpl = `// Code generated by protoc-gen-go-gsv. DO NOT EDIT.
package [[.packageName]]

const (
	[[.serviceName]]Name = "[[.packageName]].[[.protoServiceName]]"
)
`

const pbJsonTmpl = `package [[.packageName]]

import "google.golang.org/protobuf/encoding/protojson"

[[range $i,$m := .message]]
func (x *[[$m.GoIdent.GoName]]) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{UseEnumNumbers: true, EmitUnpopulated: true}.Marshal(x)
}

func (x *[[$m.GoIdent.GoName]]) UnmarshalJSON(input []byte) error {
	return protojson.UnmarshalOptions{}.Unmarshal(input, x)
}
[[end]]
`
